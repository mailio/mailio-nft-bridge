// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://mail.io/tos",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/bridge/balance": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Gets the current balance of NFT bridge",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nft Bridge"
                ],
                "summary": "Nft Contract",
                "responses": {
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            }
        },
        "/v1/catalog": {
            "get": {
                "description": "List Catalogs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalog"
                ],
                "summary": "List Catalog",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Catalog"
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "When ID is given with the POST object then it's an update, otherwise insert",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalog"
                ],
                "summary": "Upsert Catalog",
                "parameters": [
                    {
                        "description": "catalog",
                        "name": "catalog",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Catalog"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Catalog"
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    },
                    "401": {
                        "description": "access denied",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            }
        },
        "/v1/catalog/{id}": {
            "get": {
                "description": "Get Catalog by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Catalog"
                ],
                "summary": "Get Catalog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Catalog"
                        }
                    },
                    "404": {
                        "description": "catalog not found",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            }
        },
        "/v1/claim": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List Latest claims",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claiming"
                ],
                "summary": "List Claims",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Claim"
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            },
            "post": {
                "description": "Mints the new NFT based on the category selected. All NFTs are on Polygon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claiming"
                ],
                "summary": "Mint new NFT",
                "parameters": [
                    {
                        "description": "eip-712 signed claim",
                        "name": "claim",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Claim"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Claim"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    },
                    "403": {
                        "description": "captacha failed",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            }
        },
        "/v1/claim/{address}/payload/{catalogId}": {
            "get": {
                "description": "gets the payload to sign by the user with their wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claiming"
                ],
                "summary": "Nft Claim",
                "parameters": [
                    {
                        "type": "string",
                        "description": "categoryId",
                        "name": "catalogId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            }
        },
        "/v1/login": {
            "post": {
                "description": "User login and returns JWT token\nUser considered as admin, since only adding catalogs is allowed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Email and Password required",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EmailPasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.JwtTokenOutput"
                        }
                    },
                    "401": {
                        "description": "login failed",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            }
        },
        "/v1/nftimage/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all images pinned to infura",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nft Images"
                ],
                "summary": "List all pinned images",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NftImage"
                        }
                    },
                    "400": {
                        "description": "failed to read file",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    },
                    "500": {
                        "description": "upload failed",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            }
        },
        "/v1/nftimage/upload": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upload file to IPFS (on Infura) and pin it",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nft Images"
                ],
                "summary": "Upload to IPFS",
                "operationId": "file.upload",
                "parameters": [
                    {
                        "type": "file",
                        "description": "image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NftImageUploadResponse"
                        }
                    },
                    "400": {
                        "description": "failed to read file",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    },
                    "500": {
                        "description": "upload failed",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            }
        },
        "/v1/nftimage/{hash}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete pinned image from local service (infura)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nft Images"
                ],
                "summary": "Delete pinned image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "image hash",
                        "name": "hash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NftPins"
                        }
                    },
                    "400": {
                        "description": "failed to read file",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    },
                    "500": {
                        "description": "upload failed",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            }
        },
        "/v1/user/claims/{walletaddress}": {
            "get": {
                "description": "Reads the claimed transaction log (all mailio claimed NFTs)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Claiming"
                ],
                "summary": "Get claimed tx log",
                "parameters": [
                    {
                        "type": "string",
                        "description": "users wallet address",
                        "name": "walletaddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ClaimPreview"
                            }
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.JSONError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.JSONError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Catalog": {
            "type": "object",
            "required": [
                "contentLink",
                "description",
                "keywords",
                "name",
                "type"
            ],
            "properties": {
                "contentLink": {
                    "type": "string",
                    "maxLength": 2000,
                    "minLength": 3
                },
                "created": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "minLength": 3
                },
                "id": {
                    "type": "string"
                },
                "imageLink": {
                    "description": "CID/hash of the image",
                    "type": "string"
                },
                "keywords": {
                    "description": "comma separated list of keywords",
                    "type": "string",
                    "maxLength": 1000,
                    "minLength": 3
                },
                "modified": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "nftTokensUsed": {
                    "description": "currently minted tokens for the catalog",
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "videoLink": {
                    "description": "YouTube or similar link",
                    "type": "string"
                }
            }
        },
        "model.Claim": {
            "type": "object",
            "required": [
                "catalogId",
                "recaptcha_token",
                "signature",
                "walletAddress"
            ],
            "properties": {
                "catalogId": {
                    "description": "categoryId to be claimed",
                    "type": "string"
                },
                "created": {
                    "type": "integer"
                },
                "gasPrice": {
                    "description": "gas price of the transaction",
                    "type": "integer"
                },
                "keywords": {
                    "description": "keywords (not need to be stored in db)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ClaimKeyword"
                    }
                },
                "mailioAddress": {
                    "description": "optional mailio address",
                    "type": "string"
                },
                "recaptcha_token": {
                    "description": "recaptcha v3 token // required",
                    "type": "string"
                },
                "signature": {
                    "description": "signature of categoryId + nonce",
                    "type": "string"
                },
                "tokenUri": {
                    "description": "token uri",
                    "type": "string"
                },
                "txHash": {
                    "description": "transaction hash of the transaction",
                    "type": "string"
                },
                "walletAddress": {
                    "description": "publickey of the user retrieved from wallet",
                    "type": "string"
                }
            }
        },
        "model.ClaimKeyword": {
            "type": "object",
            "properties": {
                "word": {
                    "type": "string"
                }
            }
        },
        "model.ClaimPreview": {
            "type": "object",
            "required": [
                "catalogId",
                "recaptcha_token",
                "signature",
                "walletAddress"
            ],
            "properties": {
                "catalogId": {
                    "description": "categoryId to be claimed",
                    "type": "string"
                },
                "created": {
                    "type": "integer"
                },
                "gasPrice": {
                    "description": "gas price of the transaction",
                    "type": "integer"
                },
                "keywords": {
                    "description": "keywords (not need to be stored in db)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ClaimKeyword"
                    }
                },
                "mailioAddress": {
                    "description": "optional mailio address",
                    "type": "string"
                },
                "recaptcha_token": {
                    "description": "recaptcha v3 token // required",
                    "type": "string"
                },
                "signature": {
                    "description": "signature of categoryId + nonce",
                    "type": "string"
                },
                "tokenId": {
                    "type": "integer"
                },
                "tokenUri": {
                    "description": "token uri",
                    "type": "string"
                },
                "txHash": {
                    "description": "transaction hash of the transaction",
                    "type": "string"
                },
                "txStatus": {
                    "description": "1 = success, 0 = fail",
                    "type": "integer"
                },
                "walletAddress": {
                    "description": "publickey of the user retrieved from wallet",
                    "type": "string"
                }
            }
        },
        "model.EmailPasswordInput": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.JwtTokenOutput": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "model.NftImage": {
            "type": "object",
            "properties": {
                "Keys": {
                    "$ref": "#/definitions/model.NftKeys"
                },
                "PinLsObject": {
                    "$ref": "#/definitions/model.NftPinLsObject"
                }
            }
        },
        "model.NftImageUploadResponse": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                }
            }
        },
        "model.NftKeys": {
            "type": "object",
            "additionalProperties": true
        },
        "model.NftPinLsObject": {
            "type": "object",
            "properties": {
                "Cid": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                }
            }
        },
        "model.NftPins": {
            "type": "object",
            "properties": {
                "pins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Mailio NFT Server API",
	Description:      "Mailio NFT Swagger Document",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
