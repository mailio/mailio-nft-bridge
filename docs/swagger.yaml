definitions:
  api.JSONError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  model.Catalog:
    properties:
      contentLink:
        maxLength: 2000
        minLength: 3
        type: string
      created:
        type: integer
      description:
        maxLength: 1000
        minLength: 3
        type: string
      id:
        type: string
      imageLink:
        description: CID/hash of the image
        type: string
      keywords:
        description: comma separated list of keywords
        maxLength: 1000
        minLength: 3
        type: string
      modified:
        type: integer
      name:
        maxLength: 255
        minLength: 3
        type: string
      nftTokensUsed:
        description: currently minted tokens for the catalog
        type: integer
      type:
        type: string
      videoLink:
        description: YouTube or similar link
        type: string
    required:
    - contentLink
    - description
    - keywords
    - name
    - type
    type: object
  model.Claim:
    properties:
      catalogId:
        description: categoryId to be claimed
        type: string
      created:
        type: integer
      gasPrice:
        description: gas price of the transaction
        type: integer
      keywords:
        description: keywords (not need to be stored in db)
        items:
          $ref: '#/definitions/model.ClaimKeyword'
        type: array
      mailioAddress:
        description: optional mailio address
        type: string
      recaptcha_token:
        description: recaptcha v3 token // required
        type: string
      signature:
        description: signature of categoryId + nonce
        type: string
      tokenUri:
        description: token uri
        type: string
      txHash:
        description: transaction hash of the transaction
        type: string
      walletAddress:
        description: publickey of the user retrieved from wallet
        type: string
    required:
    - catalogId
    - recaptcha_token
    - signature
    - walletAddress
    type: object
  model.ClaimKeyword:
    properties:
      word:
        type: string
    type: object
  model.ClaimPreview:
    properties:
      catalogId:
        description: categoryId to be claimed
        type: string
      created:
        type: integer
      gasPrice:
        description: gas price of the transaction
        type: integer
      keywords:
        description: keywords (not need to be stored in db)
        items:
          $ref: '#/definitions/model.ClaimKeyword'
        type: array
      mailioAddress:
        description: optional mailio address
        type: string
      recaptcha_token:
        description: recaptcha v3 token // required
        type: string
      signature:
        description: signature of categoryId + nonce
        type: string
      tokenId:
        type: integer
      tokenUri:
        description: token uri
        type: string
      txHash:
        description: transaction hash of the transaction
        type: string
      txStatus:
        description: 1 = success, 0 = fail
        type: integer
      walletAddress:
        description: publickey of the user retrieved from wallet
        type: string
    required:
    - catalogId
    - recaptcha_token
    - signature
    - walletAddress
    type: object
  model.EmailPasswordInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.JwtTokenOutput:
    properties:
      token:
        type: string
    type: object
  model.NftImage:
    properties:
      Keys:
        $ref: '#/definitions/model.NftKeys'
      PinLsObject:
        $ref: '#/definitions/model.NftPinLsObject'
    type: object
  model.NftImageUploadResponse:
    properties:
      hash:
        type: string
      name:
        type: string
      size:
        type: string
    type: object
  model.NftKeys:
    additionalProperties: true
    type: object
  model.NftPinLsObject:
    properties:
      Cid:
        type: string
      Type:
        type: string
    type: object
  model.NftPins:
    properties:
      pins:
        items:
          type: string
        type: array
    type: object
info:
  contact: {}
  description: Mailio NFT Swagger Document
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://mail.io/tos
  title: Mailio NFT Server API
  version: "1.0"
paths:
  /v1/bridge/balance:
    get:
      consumes:
      - application/json
      description: Gets the current balance of NFT bridge
      produces:
      - application/json
      responses:
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.JSONError'
      security:
      - ApiKeyAuth: []
      summary: Nft Contract
      tags:
      - Nft Bridge
  /v1/catalog:
    get:
      consumes:
      - application/json
      description: List Catalogs
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Catalog'
            type: array
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.JSONError'
      summary: List Catalog
      tags:
      - Catalog
    post:
      consumes:
      - application/json
      description: When ID is given with the POST object then it's an update, otherwise
        insert
      parameters:
      - description: catalog
        in: body
        name: catalog
        required: true
        schema:
          $ref: '#/definitions/model.Catalog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Catalog'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/api.JSONError'
        "401":
          description: access denied
          schema:
            $ref: '#/definitions/api.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.JSONError'
      security:
      - ApiKeyAuth: []
      summary: Upsert Catalog
      tags:
      - Catalog
  /v1/catalog/{id}:
    get:
      consumes:
      - application/json
      description: Get Catalog by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Catalog'
        "404":
          description: catalog not found
          schema:
            $ref: '#/definitions/api.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.JSONError'
      summary: Get Catalog
      tags:
      - Catalog
  /v1/claim:
    get:
      consumes:
      - application/json
      description: List Latest claims
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Claim'
            type: array
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.JSONError'
      security:
      - ApiKeyAuth: []
      summary: List Claims
      tags:
      - Claiming
    post:
      consumes:
      - application/json
      description: Mints the new NFT based on the category selected. All NFTs are
        on Polygon
      parameters:
      - description: eip-712 signed claim
        in: body
        name: claim
        required: true
        schema:
          $ref: '#/definitions/model.Claim'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Claim'
            type: array
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/api.JSONError'
        "403":
          description: captacha failed
          schema:
            $ref: '#/definitions/api.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.JSONError'
      summary: Mint new NFT
      tags:
      - Claiming
  /v1/claim/{address}/payload/{catalogId}:
    get:
      consumes:
      - application/json
      description: gets the payload to sign by the user with their wallet
      parameters:
      - description: categoryId
        in: path
        name: catalogId
        required: true
        type: string
      - description: address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.JSONError'
      summary: Nft Claim
      tags:
      - Claiming
  /v1/login:
    post:
      consumes:
      - application/json
      description: |-
        User login and returns JWT token
        User considered as admin, since only adding catalogs is allowed
      parameters:
      - description: Email and Password required
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.EmailPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JwtTokenOutput'
        "401":
          description: login failed
          schema:
            $ref: '#/definitions/api.JSONError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.JSONError'
      summary: Admin login
      tags:
      - Auth
  /v1/nftimage/{hash}:
    delete:
      consumes:
      - application/json
      description: Delete pinned image from local service (infura)
      parameters:
      - description: image hash
        in: path
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NftPins'
        "400":
          description: failed to read file
          schema:
            $ref: '#/definitions/api.JSONError'
        "500":
          description: upload failed
          schema:
            $ref: '#/definitions/api.JSONError'
      security:
      - ApiKeyAuth: []
      summary: Delete pinned image
      tags:
      - Nft Images
  /v1/nftimage/list:
    get:
      consumes:
      - application/json
      description: List all images pinned to infura
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NftImage'
        "400":
          description: failed to read file
          schema:
            $ref: '#/definitions/api.JSONError'
        "500":
          description: upload failed
          schema:
            $ref: '#/definitions/api.JSONError'
      security:
      - ApiKeyAuth: []
      summary: List all pinned images
      tags:
      - Nft Images
  /v1/nftimage/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload file to IPFS (on Infura) and pin it
      operationId: file.upload
      parameters:
      - description: image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NftImageUploadResponse'
        "400":
          description: failed to read file
          schema:
            $ref: '#/definitions/api.JSONError'
        "500":
          description: upload failed
          schema:
            $ref: '#/definitions/api.JSONError'
      security:
      - ApiKeyAuth: []
      summary: Upload to IPFS
      tags:
      - Nft Images
  /v1/user/claims/{walletaddress}:
    get:
      consumes:
      - application/json
      description: Reads the claimed transaction log (all mailio claimed NFTs)
      parameters:
      - description: users wallet address
        in: path
        name: walletaddress
        required: true
        type: string
      - description: limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ClaimPreview'
            type: array
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/api.JSONError'
      summary: Get claimed tx log
      tags:
      - Claiming
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
